// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package sqlc

import (
	"database/sql"
	"fmt"
	"time"
)

type Campus string

const (
	CampusQing Campus = "qing"
	CampusSha  Campus = "sha"
)

func (e *Campus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Campus(s)
	case string:
		*e = Campus(s)
	default:
		return fmt.Errorf("unsupported scan type for Campus: %T", src)
	}
	return nil
}

func (e Campus) Valid() bool {
	switch e {
	case CampusQing,
		CampusSha:
		return true
	}
	return false
}

func AllCampusValues() []Campus {
	return []Campus{
		CampusQing,
		CampusSha,
	}
}

type LocationStatus string

const (
	LocationStatusOriginal    LocationStatus = "original"
	LocationStatusEntrainment LocationStatus = "entrainment"
	LocationStatusElsewhere   LocationStatus = "elsewhere"
)

func (e *LocationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LocationStatus(s)
	case string:
		*e = LocationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for LocationStatus: %T", src)
	}
	return nil
}

func (e LocationStatus) Valid() bool {
	switch e {
	case LocationStatusOriginal,
		LocationStatusEntrainment,
		LocationStatusElsewhere:
		return true
	}
	return false
}

func AllLocationStatusValues() []LocationStatus {
	return []LocationStatus{
		LocationStatusOriginal,
		LocationStatusEntrainment,
		LocationStatusElsewhere,
	}
}

type Permission string

const (
	PermissionLevel1 Permission = "level1"
	PermissionLevel2 Permission = "level2"
	PermissionLevel3 Permission = "level3"
)

func (e *Permission) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Permission(s)
	case string:
		*e = Permission(s)
	default:
		return fmt.Errorf("unsupported scan type for Permission: %T", src)
	}
	return nil
}

func (e Permission) Valid() bool {
	switch e {
	case PermissionLevel1,
		PermissionLevel2,
		PermissionLevel3:
		return true
	}
	return false
}

func AllPermissionValues() []Permission {
	return []Permission{
		PermissionLevel1,
		PermissionLevel2,
		PermissionLevel3,
	}
}

type TimeBucket string

const (
	TimeBucketMorning   TimeBucket = "morning"
	TimeBucketNoon      TimeBucket = "noon"
	TimeBucketAfternoon TimeBucket = "afternoon"
	TimeBucketEvening   TimeBucket = "evening"
	TimeBucketNight     TimeBucket = "night"
)

func (e *TimeBucket) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TimeBucket(s)
	case string:
		*e = TimeBucket(s)
	default:
		return fmt.Errorf("unsupported scan type for TimeBucket: %T", src)
	}
	return nil
}

func (e TimeBucket) Valid() bool {
	switch e {
	case TimeBucketMorning,
		TimeBucketNoon,
		TimeBucketAfternoon,
		TimeBucketEvening,
		TimeBucketNight:
		return true
	}
	return false
}

func AllTimeBucketValues() []TimeBucket {
	return []TimeBucket{
		TimeBucketMorning,
		TimeBucketNoon,
		TimeBucketAfternoon,
		TimeBucketEvening,
		TimeBucketNight,
	}
}

type Found struct {
	ID             int32          `json:"id"`
	CreateAt       time.Time      `json:"createAt"`
	PickerOpenid   string         `json:"pickerOpenid"`
	FoundDate      time.Time      `json:"foundDate"`
	TimeBucket     TimeBucket     `json:"timeBucket"`
	LocationID     int16          `json:"locationID"`
	LocationInfo   string         `json:"locationInfo"`
	LocationStatus LocationStatus `json:"locationStatus"`
	TypeID         int16          `json:"typeID"`
	ItemInfo       string         `json:"itemInfo"`
	Image          string         `json:"image"`
	ImageKey       string         `json:"imageKey"`
	OwnerInfo      string         `json:"ownerInfo"`
	AddtionalInfo  string         `json:"addtionalInfo"`
}

type LocationNarrow struct {
	ID     int16  `json:"id"`
	Name   string `json:"name"`
	WideID int16  `json:"wideID"`
}

type LocationWide struct {
	ID     int16  `json:"id"`
	Name   string `json:"name"`
	Campus Campus `json:"campus"`
}

type Lost struct {
	ID          int32      `json:"id"`
	CreateAt    time.Time  `json:"createAt"`
	OwnerOpenid string     `json:"ownerOpenid"`
	LostDate    time.Time  `json:"lostDate"`
	TimeBucket  TimeBucket `json:"timeBucket"`
	TypeID      int16      `json:"typeID"`
	LocationID  int16      `json:"locationID"`
	LocationId1 int16      `json:"locationId1"`
	LocationId2 int16      `json:"locationId2"`
}

type Manager struct {
	ID         int16      `json:"id"`
	UsrOpenid  string     `json:"usrOpenid"`
	Permission Permission `json:"permission"`
}

type Match struct {
	ID           int32          `json:"id"`
	CreateAt     time.Time      `json:"createAt"`
	PickerOpenid string         `json:"pickerOpenid"`
	OwnerOpenid  string         `json:"ownerOpenid"`
	FoundDate    time.Time      `json:"foundDate"`
	LostDate     time.Time      `json:"lostDate"`
	TypeID       int16          `json:"typeID"`
	ItemInfo     string         `json:"itemInfo"`
	Image        string         `json:"image"`
	ImageKey     string         `json:"imageKey"`
	Comment      sql.NullString `json:"comment"`
}

type TypeNarrow struct {
	ID     int16  `json:"id"`
	Name   string `json:"name"`
	WideID int16  `json:"wideID"`
}

type TypeWide struct {
	ID   int16  `json:"id"`
	Name string `json:"name"`
}

type Usr struct {
	Openid    string `json:"openid"`
	Name      string `json:"name"`
	Phone     string `json:"phone"`
	StudentID string `json:"studentID"`
	AvatarUrl string `json:"avatarUrl"`
	Avatar    []byte `json:"avatar"`
}
