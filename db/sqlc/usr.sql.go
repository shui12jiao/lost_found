// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: usr.sql

package sqlc

import (
	"context"
)

const addUsr = `-- name: AddUsr :one
INSERT INTO usr (
    openid,
    name,
    student_id,
    avatar
) VALUES (
  $1, $2, $3, $4
) RETURNING openid, name, student_id, avatar
`

type AddUsrParams struct {
	Openid    string `json:"openid"`
	Name      string `json:"name"`
	StudentID string `json:"studentID"`
	Avatar    string `json:"avatar"`
}

func (q *Queries) AddUsr(ctx context.Context, arg AddUsrParams) (Usr, error) {
	row := q.db.QueryRowContext(ctx, addUsr,
		arg.Openid,
		arg.Name,
		arg.StudentID,
		arg.Avatar,
	)
	var i Usr
	err := row.Scan(
		&i.Openid,
		&i.Name,
		&i.StudentID,
		&i.Avatar,
	)
	return i, err
}

const getUsr = `-- name: GetUsr :one
SELECT openid, name, student_id, avatar FROM usr
WHERE openid  = $1 LIMIT 1
`

func (q *Queries) GetUsr(ctx context.Context, openid string) (Usr, error) {
	row := q.db.QueryRowContext(ctx, getUsr, openid)
	var i Usr
	err := row.Scan(
		&i.Openid,
		&i.Name,
		&i.StudentID,
		&i.Avatar,
	)
	return i, err
}
