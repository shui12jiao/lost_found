// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: type.sql

package sqlc

import (
	"context"
)

const addTypeNarrow = `-- name: AddTypeNarrow :one
/*
type_narrow
*/
INSERT INTO type_narrow (
    name,
    wide_id
) VALUES (
  $1, $2
) RETURNING id, name, wide_id
`

type AddTypeNarrowParams struct {
	Name   string `json:"name"`
	WideID int16  `json:"wideID"`
}

func (q *Queries) AddTypeNarrow(ctx context.Context, arg AddTypeNarrowParams) (TypeNarrow, error) {
	row := q.db.QueryRowContext(ctx, addTypeNarrow, arg.Name, arg.WideID)
	var i TypeNarrow
	err := row.Scan(&i.ID, &i.Name, &i.WideID)
	return i, err
}

const addTypeWide = `-- name: AddTypeWide :one
/*
type_wide
*/
INSERT INTO type_wide (
    name
) VALUES (
  $1
) RETURNING id, name
`

func (q *Queries) AddTypeWide(ctx context.Context, name string) (TypeWide, error) {
	row := q.db.QueryRowContext(ctx, addTypeWide, name)
	var i TypeWide
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteTypeNarrow = `-- name: DeleteTypeNarrow :exec
DELETE FROM type_narrow
WHERE id = $1
`

func (q *Queries) DeleteTypeNarrow(ctx context.Context, id int16) error {
	_, err := q.db.ExecContext(ctx, deleteTypeNarrow, id)
	return err
}

const deleteTypeWide = `-- name: DeleteTypeWide :exec
DELETE FROM type_wide
WHERE id = $1
`

func (q *Queries) DeleteTypeWide(ctx context.Context, id int16) error {
	_, err := q.db.ExecContext(ctx, deleteTypeWide, id)
	return err
}

const getTypeNarrow = `-- name: GetTypeNarrow :one
SELECT id, name, wide_id FROM type_narrow
WHERE id  = $1 LIMIT 1
`

func (q *Queries) GetTypeNarrow(ctx context.Context, id int16) (TypeNarrow, error) {
	row := q.db.QueryRowContext(ctx, getTypeNarrow, id)
	var i TypeNarrow
	err := row.Scan(&i.ID, &i.Name, &i.WideID)
	return i, err
}

const getTypeWide = `-- name: GetTypeWide :one
SELECT id, name FROM type_wide
WHERE id  = $1 LIMIT 1
`

func (q *Queries) GetTypeWide(ctx context.Context, id int16) (TypeWide, error) {
	row := q.db.QueryRowContext(ctx, getTypeWide, id)
	var i TypeWide
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listTypeNarrow = `-- name: ListTypeNarrow :many
SELECT id, name, wide_id FROM type_narrow
`

func (q *Queries) ListTypeNarrow(ctx context.Context) ([]TypeNarrow, error) {
	rows, err := q.db.QueryContext(ctx, listTypeNarrow)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TypeNarrow{}
	for rows.Next() {
		var i TypeNarrow
		if err := rows.Scan(&i.ID, &i.Name, &i.WideID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTypeWide = `-- name: ListTypeWide :many
SELECT id, name FROM type_wide
`

func (q *Queries) ListTypeWide(ctx context.Context) ([]TypeWide, error) {
	rows, err := q.db.QueryContext(ctx, listTypeWide)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TypeWide{}
	for rows.Next() {
		var i TypeWide
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
