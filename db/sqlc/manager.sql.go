// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: manager.sql

package sqlc

import (
	"context"
)

const addManager = `-- name: AddManager :one
INSERT INTO manager (
    usr_openid,
    permission
) VALUES (
  $1, $2
) RETURNING id, usr_openid, permission
`

type AddManagerParams struct {
	UsrOpenid  string     `json:"usrOpenid"`
	Permission Permission `json:"permission"`
}

func (q *Queries) AddManager(ctx context.Context, arg AddManagerParams) (Manager, error) {
	row := q.db.QueryRowContext(ctx, addManager, arg.UsrOpenid, arg.Permission)
	var i Manager
	err := row.Scan(&i.ID, &i.UsrOpenid, &i.Permission)
	return i, err
}

const deleteManager = `-- name: DeleteManager :exec
DELETE FROM manager
WHERE id = $1
`

func (q *Queries) DeleteManager(ctx context.Context, id int16) error {
	_, err := q.db.ExecContext(ctx, deleteManager, id)
	return err
}

const getManager = `-- name: GetManager :one
SELECT id, usr_openid, permission FROM manager
WHERE id  = $1 LIMIT 1
`

func (q *Queries) GetManager(ctx context.Context, id int16) (Manager, error) {
	row := q.db.QueryRowContext(ctx, getManager, id)
	var i Manager
	err := row.Scan(&i.ID, &i.UsrOpenid, &i.Permission)
	return i, err
}

const getManagerByOpenid = `-- name: GetManagerByOpenid :one
SELECT id, usr_openid, permission FROM manager
WHERE usr_openid = $1 LIMIT 1
`

func (q *Queries) GetManagerByOpenid(ctx context.Context, usrOpenid string) (Manager, error) {
	row := q.db.QueryRowContext(ctx, getManagerByOpenid, usrOpenid)
	var i Manager
	err := row.Scan(&i.ID, &i.UsrOpenid, &i.Permission)
	return i, err
}

const listManager = `-- name: ListManager :many
SELECT id, usr_openid, permission FROM manager
`

func (q *Queries) ListManager(ctx context.Context) ([]Manager, error) {
	rows, err := q.db.QueryContext(ctx, listManager)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Manager{}
	for rows.Next() {
		var i Manager
		if err := rows.Scan(&i.ID, &i.UsrOpenid, &i.Permission); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
