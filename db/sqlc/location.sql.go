// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: location.sql

package sqlc

import (
	"context"
)

const addLocationNarrow = `-- name: AddLocationNarrow :one
/*
location_narrow
*/
INSERT INTO location_narrow (
    name,
    wide_id
) VALUES (
  $1, $2
) RETURNING id, name, wide_id
`

type AddLocationNarrowParams struct {
	Name   string `json:"name"`
	WideID int16  `json:"wideID"`
}

func (q *Queries) AddLocationNarrow(ctx context.Context, arg AddLocationNarrowParams) (LocationNarrow, error) {
	row := q.db.QueryRowContext(ctx, addLocationNarrow, arg.Name, arg.WideID)
	var i LocationNarrow
	err := row.Scan(&i.ID, &i.Name, &i.WideID)
	return i, err
}

const addLocationWide = `-- name: AddLocationWide :one
/*
location_wide
*/
INSERT INTO location_wide (
    name,
    campus
) VALUES (
  $1, $2
) RETURNING id, name, campus
`

type AddLocationWideParams struct {
	Name   string `json:"name"`
	Campus Campus `json:"campus"`
}

func (q *Queries) AddLocationWide(ctx context.Context, arg AddLocationWideParams) (LocationWide, error) {
	row := q.db.QueryRowContext(ctx, addLocationWide, arg.Name, arg.Campus)
	var i LocationWide
	err := row.Scan(&i.ID, &i.Name, &i.Campus)
	return i, err
}

const deleteLocationNarrow = `-- name: DeleteLocationNarrow :exec
DELETE FROM location_narrow
WHERE id = $1
`

func (q *Queries) DeleteLocationNarrow(ctx context.Context, id int16) error {
	_, err := q.db.ExecContext(ctx, deleteLocationNarrow, id)
	return err
}

const deleteLocationWide = `-- name: DeleteLocationWide :exec
DELETE FROM location_wide
WHERE id = $1
`

func (q *Queries) DeleteLocationWide(ctx context.Context, id int16) error {
	_, err := q.db.ExecContext(ctx, deleteLocationWide, id)
	return err
}

const getLocationNarrow = `-- name: GetLocationNarrow :one
SELECT id, name, wide_id FROM location_narrow
WHERE id  = $1 LIMIT 1
`

func (q *Queries) GetLocationNarrow(ctx context.Context, id int16) (LocationNarrow, error) {
	row := q.db.QueryRowContext(ctx, getLocationNarrow, id)
	var i LocationNarrow
	err := row.Scan(&i.ID, &i.Name, &i.WideID)
	return i, err
}

const getLocationWide = `-- name: GetLocationWide :one
SELECT id, name, campus FROM location_wide
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLocationWide(ctx context.Context, id int16) (LocationWide, error) {
	row := q.db.QueryRowContext(ctx, getLocationWide, id)
	var i LocationWide
	err := row.Scan(&i.ID, &i.Name, &i.Campus)
	return i, err
}

const listLocationNarrow = `-- name: ListLocationNarrow :many
SELECT id, name, wide_id FROM location_narrow
`

func (q *Queries) ListLocationNarrow(ctx context.Context) ([]LocationNarrow, error) {
	rows, err := q.db.QueryContext(ctx, listLocationNarrow)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LocationNarrow{}
	for rows.Next() {
		var i LocationNarrow
		if err := rows.Scan(&i.ID, &i.Name, &i.WideID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLocationWide = `-- name: ListLocationWide :many
SELECT id, name, campus FROM location_wide
`

func (q *Queries) ListLocationWide(ctx context.Context) ([]LocationWide, error) {
	rows, err := q.db.QueryContext(ctx, listLocationWide)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LocationWide{}
	for rows.Next() {
		var i LocationWide
		if err := rows.Scan(&i.ID, &i.Name, &i.Campus); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
